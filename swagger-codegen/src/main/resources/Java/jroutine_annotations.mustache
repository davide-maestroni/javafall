{{#vendorExtensions.x-jroutine-options}}{{#CoreInvocations.value}}  @com.github.dm.jrt.reflect.annotation.CoreInvocations({{CoreInvocations.value}})
{{/CoreInvocations.value}}{{#InputBackoff.value}}  @com.github.dm.jrt.reflect.annotation.InputBackoff({{InputBackoff.value}})
{{/InputBackoff.value}}{{#InputMaxSize.value}}  @com.github.dm.jrt.reflect.annotation.InputMaxSize({{InputMaxSize.value}})
{{/InputMaxSize.value}}{{#InputOrder.value}}  @com.github.dm.jrt.reflect.annotation.InputOrder(com.github.dm.jrt.core.config.ChannelConfiguration.OrderType.{{InputOrder.value}})
{{/InputOrder.value}}{{#LogLevel.value}}  @com.github.dm.jrt.reflect.annotation.LogLevel(com.github.dm.jrt.core.log.Log.Level.{{LogLevel.value}})
{{/LogLevel.value}}{{#LogType.value}}  @com.github.dm.jrt.reflect.annotation.LogType({{LogType.value}})
{{/LogType.value}}{{#MaxInvocations.value}}  @com.github.dm.jrt.reflect.annotation.MaxInvocations({{MaxInvocations.value}})
{{/MaxInvocations.value}}{{#OutputBackoff.value}}  @com.github.dm.jrt.reflect.annotation.OutputBackoff({{OutputBackoff.value}})
{{/OutputBackoff.value}}{{#OutputMaxSize.value}}  @com.github.dm.jrt.reflect.annotation.OutputMaxSize({{OutputMaxSize.value}})
{{/OutputMaxSize.value}}{{#OutputOrder.value}}  @com.github.dm.jrt.reflect.annotation.OutputOrder(com.github.dm.jrt.core.config.ChannelConfiguration.OrderType.{{OutputOrder.value}})
{{/OutputOrder.value}}{{#OutputTimeout.value}}  @com.github.dm.jrt.reflect.annotation.OutputTimeout(value = {{OutputTimeout.value}}{{#OutputTimeout.unit}}, unit = java.util.concurrent.TimeUnit.{{OutputTimeout.unit}}{{/OutputTimeout.unit}})
{{/OutputTimeout.value}}{{#OutputTimeoutAction.value}}  @com.github.dm.jrt.reflect.annotation.OutputTimeoutAction(com.github.dm.jrt.core.config.ChannelConfiguration.TimeoutActionType.{{OutputTimeoutAction.value}})
{{/OutputTimeoutAction.value}}{{#Priority.value}}  @com.github.dm.jrt.reflect.annotation.Priority({{Priority.value}})
{{/Priority.value}}{{#RunnerType.value}}  @com.github.dm.jrt.reflect.annotation.RunnerType({{RunnerType.value}})
{{/RunnerType.value}}{{#enableLoaders}}{{#CacheStrategy.value}}  @com.github.dm.jrt.android.reflect.annotation.CacheStrategy(com.github.dm.jrt.android.core.config.LoaderConfiguration.CacheStrategyType.{{CacheStrategy.value}})
{{/CacheStrategy.value}}{{#ClashResolution.value}}  @com.github.dm.jrt.android.reflect.annotation.ClashResolution(com.github.dm.jrt.android.core.config.LoaderConfiguration.ClashResolutionType.{{ClashResolution.value}})
{{/ClashResolution.value}}{{#InvocationId.value}}  @com.github.dm.jrt.android.reflect.annotation.InvocationId({{InvocationId.value}})
{{/InvocationId.value}}{{#LoaderId.value}}  @com.github.dm.jrt.android.reflect.annotation.LoaderId({{LoaderId.value}})
{{/LoaderId.value}}{{#MatchResolution.value}}  @com.github.dm.jrt.android.reflect.annotation.MatchResolution(com.github.dm.jrt.android.core.config.LoaderConfiguration.ClashResolutionType.{{MatchResolution.value}})
{{/MatchResolution.value}}{{#ResultStaleTime.value}}  @com.github.dm.jrt.android.reflect.annotation.ResultStaleTime(value = {{ResultStaleTime.value}}{{#ResultStaleTime.unit}}, unit = java.util.concurrent.TimeUnit.{{ResultStaleTime.unit}}{{/ResultStaleTime.unit}})
{{/ResultStaleTime.value}}{{/enableLoaders}}{{#enableServices}}{{#ServiceLog.value}}  @com.github.dm.jrt.android.reflect.annotation.ServiceLog({{ServiceLog.value}})
{{/ServiceLog.value}}{{#ServiceRunner.value}}  @com.github.dm.jrt.android.reflect.annotation.ServiceRunner({{ServiceRunner.value}})
{{/ServiceRunner.value}}{{/enableServices}}{{/vendorExtensions.x-jroutine-options}}