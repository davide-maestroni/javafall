/*
 * Copyright 2016 Davide Maestroni
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// GENERATED CODE - PLEASE DO NOT EDIT

${generatedPackage}

public final class ${generatedClassName}${genericTypes} implements ${interfaceFullName} {

  private final com.github.dm.jrt.android.v11.core.LoaderSource mLoaderSource;

  public ${generatedClassName}(@org.jetbrains.annotations.NotNull final com.github.dm.jrt.android.reflect.ContextInvocationTarget<?> target,
      @org.jetbrains.annotations.NotNull final com.github.dm.jrt.android.v11.core.LoaderSource loaderSource,
      @org.jetbrains.annotations.NotNull final com.github.dm.jrt.core.config.InvocationConfiguration invocationConfiguration,
      @org.jetbrains.annotations.NotNull final com.github.dm.jrt.reflect.config.WrapperConfiguration wrapperConfiguration,
      @org.jetbrains.annotations.NotNull final com.github.dm.jrt.android.core.config.LoaderConfiguration loaderConfiguration) {
    com.github.dm.jrt.core.util.ConstantConditions.notNull("Loader source", loaderSource);
    com.github.dm.jrt.core.util.ConstantConditions.notNull("invocation configuration", invocationConfiguration);
    com.github.dm.jrt.core.util.ConstantConditions.notNull("wrapper configuration", wrapperConfiguration);
    com.github.dm.jrt.core.util.ConstantConditions.notNull("Loader configuration", loaderConfiguration);
    if (!target.isOfType(${classErasure}.class)) {
      throw new IllegalArgumentException("the invocation target must be the class or an instance of ${classFullName}");
    }

    mLoaderSource = loaderSource;
    ${routineFieldsInit}
  }

  @org.jetbrains.annotations.NotNull
  public static ${genericTypes} com.github.dm.jrt.android.proxy.builder.AbstractLoaderProxyObjectBuilder<${interfaceFullName}> wrapperOn(
      @org.jetbrains.annotations.NotNull final com.github.dm.jrt.android.v11.core.LoaderSource loaderSource) {
    return new LoaderProxyObjectBuilder${genericTypes}(loaderSource);
  }

  @org.jetbrains.annotations.NotNull
  private com.github.dm.jrt.android.core.builder.LoaderRoutineBuilder getBuilder() {
    return com.github.dm.jrt.android.v11.core.JRoutineLoader.routineOn(mLoaderSource);
  }

  private static class LoaderProxyObjectBuilder${genericTypes} extends com.github.dm.jrt.android.proxy.builder.AbstractLoaderProxyObjectBuilder<${interfaceFullName}> {

    private final com.github.dm.jrt.android.v11.core.LoaderSource mLoaderSource;

    private LoaderProxyObjectBuilder(@org.jetbrains.annotations.NotNull final com.github.dm.jrt.android.v11.core.LoaderSource loaderSource) {
      mLoaderSource = com.github.dm.jrt.core.util.ConstantConditions.notNull("Loader source", loaderSource);
    }

    @Override
    @org.jetbrains.annotations.Nullable
    protected Object getComponent() {
      return mLoaderSource.getComponent();
    }

    @Override
    @org.jetbrains.annotations.NotNull
    protected Class<? super ${interfaceFullName}> getInterfaceClass() {
      return ${interfaceErasure}.class;
    }

    @Override
    @org.jetbrains.annotations.NotNull
    protected ${interfaceFullName} newProxy(
        @org.jetbrains.annotations.NotNull final com.github.dm.jrt.android.reflect.ContextInvocationTarget<?> target,
        @org.jetbrains.annotations.NotNull final com.github.dm.jrt.core.config.InvocationConfiguration invocationConfiguration,
        @org.jetbrains.annotations.NotNull final com.github.dm.jrt.reflect.config.WrapperConfiguration wrapperConfiguration,
        @org.jetbrains.annotations.NotNull final com.github.dm.jrt.android.core.config.LoaderConfiguration loaderConfiguration) {
      return new ${generatedClassName}${genericTypes}(target, mLoaderSource, invocationConfiguration, wrapperConfiguration, loaderConfiguration);
    }
  }
