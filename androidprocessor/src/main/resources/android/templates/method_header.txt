/*
 * Copyright 2016 Davide Maestroni
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// GENERATED CODE - PLEASE DO NOT EDIT

    private final com.github.dm.jrt.routine.Routine<?, ${resultClassName}> mRoutine${methodCount};

    @org.jetbrains.annotations.NotNull
    @SuppressWarnings("unchecked")
    private com.github.dm.jrt.routine.Routine<?, ${resultClassName}> initRoutine${methodCount}(
            @org.jetbrains.annotations.NotNull final com.github.dm.jrt.android.object.core.ContextInvocationTarget<?> target,
            @org.jetbrains.annotations.NotNull final com.github.dm.jrt.core.builder.InvocationConfiguration invocationConfiguration,
            @org.jetbrains.annotations.NotNull final com.github.dm.jrt.object.builder.ProxyConfiguration proxyConfiguration,
            @org.jetbrains.annotations.NotNull final com.github.dm.jrt.android.builder.ServiceConfiguration serviceConfiguration) {

        final java.util.List<String> sharedFields = ${sharedFields};
        final com.github.dm.jrt.android.core.TargetInvocationFactory<Object, ${resultClassName}> targetFactory = com.github.dm.jrt.android.core.TargetInvocationFactory.factoryOf(
                // We need to work around Proguard stripping away generics information, so the use of a ClassToken is not an option
                (Class<? extends com.github.dm.jrt.android.invocation.ContextInvocation<Object, ${resultClassName}>>) new ContextInvocation${methodCount}${genericTypes}(sharedFields, target).getClass(), sharedFields, target);
        return getBuilder(mContext, targetFactory).withInvocations()
                                                  .with(invocationConfiguration)
                                                  ${routineBuilderOptions}
                                                  .getConfigured()
                                                  .withService()
                                                  .with(serviceConfiguration)
                                                  .getConfigured()
                                                  .buildRoutine();
    }
