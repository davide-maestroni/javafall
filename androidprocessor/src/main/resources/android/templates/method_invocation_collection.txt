/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// GENERATED CODE - PLEASE DO NOT EDIT

        @Override
        @SuppressWarnings("unchecked")
        protected void onCall(@javax.annotation.Nonnull final java.util.List<?> objects,
                @javax.annotation.Nonnull final com.gh.bmd.jrt.channel.ResultChannel<${resultClassName}> result) {

            synchronized(mMutex) {

                final ${classFullName} wrapped = mTarget;

                if (wrapped == null) {

                    throw new IllegalStateException("target object has been destroyed");
                }

                if (objects.size() > ${maxParamSize}) {

                    throw new IllegalArgumentException(
                            "wrong number of input parameters for method '${targetMethodName}': " +
                            "was " + objects.size() + " while expected " + (${maxParamSize}));
                }

                try {

                    result.orderByCall();

                    for (final ${resultClassName} element : wrapped.${targetMethodName}(${paramValues})) {

                        result.pass(element);
                    }

                } catch (final com.gh.bmd.jrt.channel.RoutineException e) {

                    throw e;

                } catch (final Throwable t) {

                    throw new com.gh.bmd.jrt.invocation.InvocationException(t);
                }
            }
        }
