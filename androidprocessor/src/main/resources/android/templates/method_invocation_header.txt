/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// GENERATED CODE - PLEASE DO NOT EDIT

    private static class ContextInvocation${methodCount}${genericTypes} extends com.github.dm.jrt.android.invocation.FunctionContextInvocation<Object, ${resultClassName}> {

        private final  com.github.dm.jrt.android.core.ContextInvocationTarget<?> mContextTarget;

        private final String mShareGroup;

        @SuppressWarnings("unused")
        private Object mInstance;

        private Object mMutex = this;

        @SuppressWarnings("unused")
        private com.github.dm.jrt.core.InvocationTarget mTarget;

        private ContextInvocation${methodCount}(@javax.annotation.Nullable final String shareGroup,
                @javax.annotation.Nonnull final com.github.dm.jrt.android.core.ContextInvocationTarget<?> target) {

            mShareGroup = shareGroup;
            mContextTarget = target;
        }

        @Override
        @SuppressWarnings({"unchecked", "ConstantConditions"})
        public void onContext(@javax.annotation.Nonnull final android.content.Context context) {

            super.onContext(context);

            try {

                final com.github.dm.jrt.core.InvocationTarget<?> target = mContextTarget.getInvocationTarget(context);
                final Object mutexTarget = ${mutexTarget};
                final String shareGroup = mShareGroup;

                if ((mutexTarget != null) && !com.github.dm.jrt.annotation.ShareGroup.NONE.equals(shareGroup)) {

                    mMutex = com.github.dm.jrt.core.RoutineBuilders.getSharedMutex(mutexTarget, shareGroup);
                }

                mTarget = target;
                mInstance = target.getTarget();

            } catch (final Throwable t) {

                throw com.github.dm.jrt.invocation.InvocationException.wrapIfNeeded(t);
            }
        }
