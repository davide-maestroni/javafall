/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// GENERATED CODE - PLEASE DO NOT EDIT

    private static class ContextInvocation${methodCount}${genericTypes} extends com.gh.bmd.jrt.android.invocation.FunctionContextInvocation<Object, ${resultClassName}> {

        private final Object[] mArgs;

        private final String mShareGroup;

        private final Class<?> mTargetClass;

        private Object mMutex = this;

        private ${classFullName} mTarget;

        private ContextInvocation${methodCount}(@javax.annotation.Nonnull final Class<?> targetClass,
                @javax.annotation.Nullable final String shareGroup, @javax.annotation.Nonnull final Object[] args) {

            mTargetClass = targetClass;
            mShareGroup = shareGroup;
            mArgs = args;
        }

        @Override
        @SuppressWarnings("unchecked")
        public void onContext(@javax.annotation.Nonnull final android.content.Context context) {

            super.onContext(context);

            try {

                final ${classFullName} target = (${classFullName}) getInstance(context, mTargetClass, mArgs);
                final Object mutex = getMutex(target, mShareGroup);
                mMutex = (mutex != null) ? mutex : this;
                mTarget = target;

            } catch (final com.gh.bmd.jrt.channel.RoutineException e) {

                throw e;

            } catch (final Throwable t) {

                throw new com.gh.bmd.jrt.invocation.InvocationException(t);
            }
        }

        @Override
        @SuppressWarnings({"unchecked", "SynchronizeOnNonFinalField"})
        public void onCall(@javax.annotation.Nonnull final java.util.List<?> objects,
                @javax.annotation.Nonnull final com.gh.bmd.jrt.channel.ResultChannel<${resultClassName}> result) {

            synchronized(mMutex) {

                final ${classFullName} wrapped = mTarget;

                if (wrapped == null) {

                    throw new IllegalStateException("target object has been destroyed");
                }

                int i = 0;
                final ${componentType}[] array = new ${componentType}[objects.size()];

                for (final Object object : objects) {

                    array[i++] = (${boxedType}) object;
                }

                try {

                    for (final ${resultClassName} element : wrapped.${targetMethodName}(array)) {

                        result.pass(element);
                    }

                } catch (final com.gh.bmd.jrt.channel.RoutineException e) {

                    throw e;

                } catch (final Throwable t) {

                    throw new com.gh.bmd.jrt.invocation.InvocationException(t);
                }
            }
        }
    }
