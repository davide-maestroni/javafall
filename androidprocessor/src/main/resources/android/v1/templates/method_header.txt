/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// GENERATED CODE - PLEASE DO NOT EDIT

    private final com.gh.bmd.jrt.routine.Routine<?, ${resultClassName}> mRoutine${methodCount};

    private static class ContextInvocationFactory${methodCount}${genericTypes} implements com.gh.bmd.jrt.android.invocation.ContextInvocationFactory<Object, ${resultClassName}> {

        private final Object[] mFactoryArgs;

        private final String mShareGroup;

        private final Class<?> mTargetClass;

        private ContextInvocationFactory${methodCount}(@javax.annotation.Nonnull final Class<?> targetClass,
                @javax.annotation.Nonnull final Object[] factoryArgs, @javax.annotation.Nullable final String shareGroup) {

            mTargetClass = targetClass;
            mFactoryArgs = factoryArgs;
            mShareGroup = shareGroup;
        }

        @javax.annotation.Nonnull
        public com.gh.bmd.jrt.android.invocation.ContextInvocation<Object, ${resultClassName}> newInvocation() {

            return new ContextInvocation${methodCount}${genericTypes}(mTargetClass, mFactoryArgs, mShareGroup);
        }
    }

    @javax.annotation.Nonnull
    private com.gh.bmd.jrt.routine.Routine<?, ${resultClassName}> initRoutine${methodCount}(
            @javax.annotation.Nonnull final com.gh.bmd.jrt.builder.InvocationConfiguration invocationConfiguration,
            @javax.annotation.Nonnull final com.gh.bmd.jrt.android.builder.LoaderConfiguration loaderConfiguration) {

        return getBuilder(mContext, new ContextInvocationFactory${methodCount}${genericTypes}(mTargetClass, mFactoryArgs, ${shareGroup}))
                                           .invocations()
                                           .with(invocationConfiguration)
                                           ${routineBuilderOptions}
                                           .withInputMaxSize(Integer.MAX_VALUE)
                                           .withInputTimeout(com.gh.bmd.jrt.util.TimeDuration.ZERO)
                                           .withOutputMaxSize(Integer.MAX_VALUE)
                                           .withOutputTimeout(com.gh.bmd.jrt.util.TimeDuration.ZERO)
                                           .set()
                                           .loaders()
                                           .with(loaderConfiguration)
                                           ${invocationBuilderOptions}
                                           .set()
                                           .buildRoutine();
    }
