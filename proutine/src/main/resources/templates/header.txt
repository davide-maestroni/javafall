/**
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// GENERATED CODE - PLEASE DO NOT EDIT
package ${packageName};

public final class ${interfaceName}${className}${genericTypes} implements ${interfaceFullName} {

    private final String mLockId;

    private final com.bmd.jrt.common.CacheHashMap<Object, java.util.Map<String, Object>> mMutexMap;

    private final ${classFullName} mWrapped;

    public ${interfaceName}${className}(final ${classFullName} wrapped,
            final com.bmd.jrt.common.CacheHashMap<Object, java.util.Map<String, Object>> mutexMap,
            final String lockId, final com.bmd.jrt.builder.RoutineConfiguration configuration) {

        if (wrapped == null) {

            throw new NullPointerException("the wrapped instance must not be null");
        }

        if (mutexMap == null) {

            throw new NullPointerException("the mutex map must not be null");
        }

        mWrapped = wrapped;
        mMutexMap = mutexMap;
        mLockId = ((lockId != null) && (lockId.length() > 0)) ? lockId : null;
        ${routineFieldsInit}
    }

    private Object getMutex(final String lockId) {

        synchronized (mMutexMap) {

            final Object wrapped = mWrapped;
            java.util.Map<String, Object> mutexMap = mMutexMap.get(wrapped);

            if (mutexMap == null) {

                mutexMap = new java.util.HashMap<String, Object>();
                mMutexMap.put(wrapped, mutexMap);
            }

            final String id = (mLockId != null) ? mLockId : lockId;
            Object mutex = mutexMap.get(id);

            if (mutex == null) {

                mutex = new Object();
                mutexMap.put(id, mutex);
            }

            return mutex;
        }
    }
