/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
apply plugin: 'maven'
apply plugin: 'signing'

/*
    EXPORT JAR: ./gradlew eJ -PexportDir=$HOME/javadoc
    UPLOAD ARCHIVE: ./gradlew upA
*/

Project.metaClass.toVersionRange = { String version ->

    def versions = version.split('\\.')
    "[" + versions[0] + "." + versions[1] + "," + versions[0] + "." + ++versions[1] + ")"
}
Project.metaClass.getWorkingBranch = {

    "git --git-dir=${rootDir}/.git --work-tree=${rootDir} rev-parse --abbrev-ref HEAD".execute().text.trim()
}
Project.metaClass.isWorkingBranch = { String branch ->

    (branch != null) && branch.equals(delegate.workingBranch)
}
Project.metaClass.getJavaCompatibility = {

    sourceCompatibility
}
Project.metaClass.setJavaCompatibility = { JavaVersion javaVersion ->

    tasks.withType(JavaCompile) {
        def javaHome = System.getenv("JAVA${javaVersion.ordinal() + 1}_HOME")
        if ((javaHome != null) && (javaHome.length() > 0)) {
            options.bootClasspath = "${javaHome}/jre/lib/rt.jar"
        }
        sourceCompatibility = javaVersion
        targetCompatibility = javaVersion
    }
}
Project.metaClass.setJavaCompilerArgs = { args ->

    tasks.withType(JavaCompile) {
        options.compilerArgs = args
    }
}
Project.metaClass.conditionalDependencies = { Closure closure ->

    closure.delegate = new ConditionalDependencySpecs(delegate)
    closure.resolveStrategy = Closure.DELEGATE_FIRST
    closure()
}

afterEvaluate { project ->

    def artifactPackaging = 'jar'

    if (isJavaProject(project)) {

        if (project.plugins.hasPlugin('jacoco')) {
            project.task('jacocoTest', dependsOn: 'test') {
                description = 'Runs the tests and generates the JaCoCo report files.'
            } << {
                tasks.jacocoTestReport.execute()
            }
        }

        if (project.plugins.hasPlugin('findbugs')) {
            project.tasks.withType(FindBugs) {
                effort = 'max'
                reportLevel = 'low'
                reports {
                    xml.enabled = false
                    html.enabled = true
                }
            }

            project.tasks.findbugsTest.onlyIf { false }
        }

        project.javadoc {
            title = "${project.archivesBaseName} ${version}"
            options.links('http://docs.oracle.com/javase/7/docs/api/')
            options.windowTitle("Javadoc - ${project.archivesBaseName}")
            options.setMemberLevel(JavadocMemberLevel.PUBLIC)
        }

        project.artifacts {
            archives project.task('sourcesJar', type: Jar) {
                description 'Generates sources Jar'
                classifier = 'sources'
                from sourceSets.main.allSource
            }

            archives project.task('javadocJar', type: Jar, dependsOn: 'javadoc') {
                description 'Generates Javadoc Jar'
                classifier = 'javadoc'
                from 'build/docs/javadoc'
            }
        }
    }

    if (isAndroidProject(project)) {

        artifactPackaging = 'aar'

        if (project.plugins.hasPlugin('jacoco')) {
            project.task('jacocoTest', dependsOn: 'connectedCheck') {
                description = 'Runs the tests and generates the JaCoCo report files.'
            } << {
                tasks.createDebugAndroidTestCoverageReport.execute()
            }

            project.task('jacocoTestReport', dependsOn: 'assemble') {
                description = 'Generates the JaCoCo report files.'
            } << {
                tasks.createDebugAndroidTestCoverageReport.execute()
            }
        }

        project.task('jar', dependsOn: 'jarRelease')

        project.android.libraryVariants.all { variant ->

            def buildTypeName = variant.buildType.name

            if (buildTypeName.equals("debug")) {
                if (project.plugins.hasPlugin('findbugs')) {
                    project.task('findbugsMain', type: FindBugs, dependsOn: "assemble${buildTypeName.capitalize()}") {
                        classes = fileTree(variant.javaCompile.destinationDir).filter {
                            !it.name.startsWith('R\$') && !it.name.equals('R.class')
                        }
                        source = variant.javaCompile.source
                        classpath = files(variant.javaCompile.classpath.files)
                        effort = 'max'
                        reportLevel = 'low'
                        reports {
                            xml.enabled = false
                            html.enabled = true
                        }
                    }
                }

                // Skip debug builds.
                return
            }

            def variantName = variant.name.capitalize()
            addJavadocTask(project, variant, "javadoc${variantName}")

            if (variantName.equalsIgnoreCase('release')) {
                addJavadocTask(project, variant, 'javadoc')
            }

            project.artifacts {
                archives project.task("sourcesJar${variantName}", type: Jar) {
                    description "Generates sources Jar from the ${variantName} build"
                    classifier = 'sources'
                    from variant.sourceSets.java.srcDirs
                }

                archives project.task("javadocJar${variantName}", type: Jar, dependsOn: "javadoc${variantName}") {
                    description "Generates Javadoc Jar from the ${variantName} build"
                    classifier = 'javadoc'
                    from 'build/docs/javadoc'
                }
            }
        }
    }

    def exportDir = new File(project.buildDir, "javadoc")
    if (project.hasProperty('exportDir')) {
        exportDir = file(project.getProperty('exportDir'))
    }

    project.task('exportJavadoc', type: Copy, dependsOn: 'javadoc') {
        from project.tasks.javadoc.destinationDir.getPath()
        into "${exportDir.getPath()}/${project.name}"
    }

    if (project.hasProperty('uploadEnabled') && project.hasProperty('repoUser')
            && project.hasProperty('repoName')) {

        signing {
            sign configurations.archives
        }

        def repoUser = project.getProperty('repoUser')
        def repoName = project.getProperty('repoName')
        def repoDescription = ""

        if (project.hasProperty('repoDescription')) {
            repoDescription = project.getProperty('repoDescription')
        }

        def userName = ""

        if (project.hasProperty('userName')) {
            userName = project.getProperty('userName')
        }

        uploadArchives {
            repositories {
                mavenDeployer {
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                    def localRepoUrl = mavenLocal().url.toString()

                    if (file(localRepoUrl).exists()) {

                        // Upload the artifacts to the local repository
                        repository(url: localRepoUrl)
                    }

                    if (project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')) {
                        repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
                            authentication(userName: sonatypeUsername, password: sonatypePassword)
                        }
                    }

                    pom.project {
                        name = project.archivesBaseName
                        packaging = artifactPackaging
                        description = repoDescription
                        url = "http://${repoUser}.github.io/${repoName}/"

                        scm {
                            url = "git@github.com:${repoUser}/${repoName}.git"
                            connection = "scm:git:git@github.com:${repoUser}/${repoName}.git"
                            developerConnection = "scm:git:git@github.com:${repoUser}/${repoName}.git"
                        }

                        licenses {
                            license {
                                name = 'The Apache Software License, Version 2.0'
                                url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                                distribution = 'repo'
                            }
                        }

                        developers {
                            developer {
                                id = repoUser
                                name = userName
                            }
                        }
                    }
                }
            }
        }
    }
}

def isJavaProject(project) {

    project.plugins.hasPlugin('java')
}

def isAndroidProject(project) {

    project.plugins.hasPlugin('com.android.library') || project.plugins.hasPlugin('com.android.application')
}

def addJavadocTask(project, variant, taskName) {

    def variantName = variant.name.capitalize()

    project.task(taskName, type: Javadoc, dependsOn: "assemble${variantName}") {
        description "Generates Javadoc from the ${variantName} build"
        source = variant.javaCompile.source
        ext.androidJar =
                "${project.android.sdkDirectory}/platforms/${project.android.compileSdkVersion}/android.jar"
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
        title = "${project.archivesBaseName} ${project.version}"
        options.links('http://docs.oracle.com/javase/7/docs/api/')
        options.linksOffline('http://developer.android.com/reference/', "${project.android.sdkDirectory}/docs/reference/")
        options.windowTitle("Javadoc - ${project.archivesBaseName}")
        options.setMemberLevel(JavadocMemberLevel.PUBLIC)
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
    }
}

class ConditionalDependencySpecs {

    Project myProject

    ConditionalDependencySpecs(Project context) {

        myProject = context
    }

    def compile(Object config) {

        def dependsOnProject = myProject.parent.subprojects.find { it.name.equals(config.name) };
        myProject.dependencies {
            if (!dependsOnProject.hasProperty('previewRelease') && dependsOnProject.hasProperty('releaseVersion')) {
                delegate.compile group: myProject.group, name: config.artifact(dependsOnProject), version: myProject.toVersionRange(dependsOnProject.getProperty('releaseVersion'))
            } else {
                delegate.compile myProject.project(":${config.name}")
            }
        }
    }

    def compile(String name) {

        compile(name: name, artifact: { name })
    }
}
