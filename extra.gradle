/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
apply plugin: 'maven'
apply plugin: 'signing'

Project.metaClass.toVersionRange = { String version ->

    version.replaceAll("^(.*)\\.[0-9]+\$", "\$1\\.+")
}
Project.metaClass.getWorkingBranch = {

    "git --git-dir=${rootDir}/.git --work-tree=${rootDir} rev-parse --abbrev-ref HEAD".execute().text.trim()
}
Project.metaClass.isWorkingBranch = { String branch ->

    (branch != null) && branch.equals(delegate.workingBranch)
}
Project.metaClass.getJavaCompatibility = {

    sourceCompatibility
}
Project.metaClass.setJavaCompatibility = { JavaVersion javaVersion ->

    tasks.withType(JavaCompile) {
        def javaHome = System.getenv("JAVA${javaVersion.ordinal() + 1}_HOME")
        if ((javaHome != null) && (javaHome.length() > 0)) {
            options.bootClasspath = "${javaHome}/jre/lib/rt.jar"
        }
        sourceCompatibility = javaVersion
        targetCompatibility = javaVersion
    }
}

afterEvaluate { project ->

    if (project.hasProperty('uploadEnabled')) {

        signing {
            sign configurations.archives
        }

        uploadArchives {
            repositories {
                mavenDeployer {
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                    def localRepoUrl = mavenLocal().url.toString()

                    if (file(localRepoUrl).exists()) {

                        // Upload the artifacts to the local repository
                        repository(url: localRepoUrl)
                    }

                    if (project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')) {

                        repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
                            authentication(userName: sonatypeUsername, password: sonatypePassword)
                        }
                    }

                    pom.project {
                        name = archivesBaseName
                        packaging = 'jar'
                        description = 'Parallel programming on the go'
                        url = 'http://davide-maestroni.github.io/jroutine/'

                        scm {
                            url = 'git@github.com:davide-maestroni/jroutine.git'
                            connection = 'scm:git:git@github.com:davide-maestroni/jroutine.git'
                            developerConnection = 'scm:git:git@github.com:davide-maestroni/jroutine.git'
                        }

                        licenses {
                            license {
                                name = 'The Apache Software License, Version 2.0'
                                url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                                distribution = 'repo'
                            }
                        }

                        developers {
                            developer {
                                id = 'davide-maestroni'
                                name = 'Davide Maestroni'
                            }
                        }
                    }
                }
            }
        }
    }
}
