/**
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// GENERATED CODE - PLEASE DO NOT EDIT

    private class SimpleInvocation${methodCount} extends com.bmd.jrt.invocation.SimpleInvocation<Object, ${resultClassName}> {

        private final Object mMutex;

        private SimpleInvocation${methodCount}() {

            final Object mutex = getMutex(${shareGroup});

            mMutex = (mutex != null) ? mutex : this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public void onCall(@javax.annotation.Nonnull final java.util.List<?> objects,
                @javax.annotation.Nonnull final com.bmd.jrt.channel.ResultChannel<${resultClassName}> result) {

            synchronized(mMutex) {

                final ${classFullName} wrapped = mWrapped.get();

                if (wrapped == null) {

                    throw new IllegalStateException("target object has been destroyed");
                }

                for (final ${resultClassName} element : wrapped.${targetMethodName}(${paramValues})) {

                    result.pass(element);
                }
            }
        }
    }
