/*
 * Copyright 2016 Davide Maestroni
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// GENERATED CODE - PLEASE DO NOT EDIT

${generatedPackage}

public final class ${generatedClassName}${genericTypes} implements ${interfaceFullName} {

  public ${generatedClassName}(@org.jetbrains.annotations.NotNull final com.github.dm.jrt.reflect.InvocationTarget<?> target,
      @org.jetbrains.annotations.NotNull final com.github.dm.jrt.core.config.InvocationConfiguration invocationConfiguration,
      @org.jetbrains.annotations.NotNull final com.github.dm.jrt.reflect.config.ReflectionConfiguration reflectionConfiguration) {
    com.github.dm.jrt.core.util.ConstantConditions.notNull("invocation configuration", invocationConfiguration);
    com.github.dm.jrt.core.util.ConstantConditions.notNull("reflection configuration", reflectionConfiguration);
    if (!target.isOfType(${classErasure}.class)) {
      throw new IllegalArgumentException("the invocation target must be the class or an instance of ${classFullName}");
    }

    ${routineFieldsInit}
  }

  @org.jetbrains.annotations.NotNull
  public static ${genericTypes} com.github.dm.jrt.proxy.builder.ProxyObjectBuilder<${interfaceFullName}> with(@org.jetbrains.annotations.NotNull final com.github.dm.jrt.reflect.InvocationTarget<? extends ${classFullName}> target) {
    if (!target.isOfType(${classErasure}.class)) {
      throw new IllegalArgumentException("the invocation target must be the class or an instance of ${classFullName}");
    }

    return new ProxyObjectBuilder${genericTypes}(target);
  }

  private static class ProxyObjectBuilder${genericTypes} extends com.github.dm.jrt.proxy.builder.AbstractProxyObjectBuilder<${interfaceFullName}> {

    private final com.github.dm.jrt.reflect.InvocationTarget<?> mTarget;

    private ProxyObjectBuilder(@org.jetbrains.annotations.NotNull final com.github.dm.jrt.reflect.InvocationTarget<?> target) {
      mTarget = target;
    }

    @Override
    @org.jetbrains.annotations.NotNull
    protected Class<? super ${interfaceFullName}> getInterfaceClass() {
      return ${interfaceErasure}.class;
    }

    @Override
    @org.jetbrains.annotations.Nullable
    protected Object getTarget() {
      return mTarget.getTarget();
    }

    @Override
    @org.jetbrains.annotations.NotNull
    protected ${interfaceFullName} newProxy(
        @org.jetbrains.annotations.NotNull final com.github.dm.jrt.core.config.InvocationConfiguration invocationConfiguration,
        @org.jetbrains.annotations.NotNull final com.github.dm.jrt.reflect.config.ReflectionConfiguration reflectionConfiguration) {
      return new ${generatedClassName}${genericTypes}(mTarget, invocationConfiguration, reflectionConfiguration);
    }
  }
