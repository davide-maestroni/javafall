/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// GENERATED CODE - PLEASE DO NOT EDIT

${generatedPackage}

public final class ${generatedClassName}${genericTypes} implements ${interfaceFullName} {

    @SuppressWarnings({"ConstantConditions", "EqualsBetweenInconvertibleTypes"})
    public ${generatedClassName}(@javax.annotation.Nonnull final com.github.dm.jrt.core.InvocationTarget target,
            @javax.annotation.Nonnull final com.github.dm.jrt.builder.InvocationConfiguration invocationConfiguration,
            @javax.annotation.Nonnull final com.github.dm.jrt.builder.ProxyConfiguration proxyConfiguration) {

        if (!target.isAssignableTo(${classErasure}.class)) {

            throw new IllegalArgumentException("the invocation target must be the class or an instance of " +
                    "${classFullName}");
        }

        ${routineFieldsInit}
    }

    @javax.annotation.Nonnull
    public static ${genericTypes} com.github.dm.jrt.proxy.builder.ProxyBuilder<${interfaceFullName}> on() {

        return new ProxyBuilder${genericTypes}(com.github.dm.jrt.core.InvocationTarget.targetClass(${classErasure}.class));
    }

    @javax.annotation.Nonnull
    public static ${genericTypes} com.github.dm.jrt.proxy.builder.ProxyBuilder<${interfaceFullName}> on(@javax.annotation.Nonnull final ${classFullName} wrapped) {

        return new ProxyBuilder${genericTypes}(com.github.dm.jrt.core.InvocationTarget.targetObject(wrapped));
    }

    private static class ProxyBuilder${genericTypes} extends com.github.dm.jrt.proxy.builder.AbstractProxyBuilder<${interfaceFullName}> {

        private final com.github.dm.jrt.core.InvocationTarget mTarget;

        private final com.github.dm.jrt.util.ClassToken<${interfaceFullName}> mToken = new com.github.dm.jrt.util.ClassToken<${interfaceFullName}>() {};

        @SuppressWarnings("ConstantConditions")
        private ProxyBuilder(@javax.annotation.Nonnull final com.github.dm.jrt.core.InvocationTarget target) {

            mTarget = target;
        }

        @Override
        @javax.annotation.Nonnull
        protected com.github.dm.jrt.util.ClassToken<${interfaceFullName}> getInterfaceToken() {

            return mToken;
        }

        @Override
        @javax.annotation.Nullable
        protected Object getTarget() {

            return mTarget.getTarget();
        }

        @Override
        @javax.annotation.Nonnull
        protected ${interfaceFullName} newProxy(
                @javax.annotation.Nonnull final com.github.dm.jrt.builder.InvocationConfiguration invocationConfiguration,
                @javax.annotation.Nonnull final com.github.dm.jrt.builder.ProxyConfiguration proxyConfiguration) {

            return new ${generatedClassName}${genericTypes}(mTarget, invocationConfiguration, proxyConfiguration);
        }
    }
