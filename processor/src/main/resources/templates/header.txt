/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// GENERATED CODE - PLEASE DO NOT EDIT

${generatedPackage}

public final class ${generatedClassName}${genericTypes} implements ${interfaceFullName} {

    @SuppressWarnings("ConstantConditions")
    public ${generatedClassName}(@javax.annotation.Nonnull final ${classFullName} target,
            @javax.annotation.Nonnull final com.gh.bmd.jrt.builder.InvocationConfiguration invocationConfiguration,
            @javax.annotation.Nonnull final com.gh.bmd.jrt.builder.ProxyConfiguration proxyConfiguration) {

        if (target == null) {

            throw new NullPointerException("the target instance must not be null");
        }

        final java.lang.ref.WeakReference<${classFullName}> wrapped = new java.lang.ref.WeakReference<${classFullName}>(target);
        ${routineFieldsInit}
    }

    @javax.annotation.Nonnull
    public static ${genericTypes} com.gh.bmd.jrt.proxy.builder.ProxyBuilder<${interfaceFullName}> on(@javax.annotation.Nonnull final ${classFullName} wrapped) {

        return new ProxyBuilder${genericTypes}(wrapped);
    }

    private static class ProxyBuilder${genericTypes} extends com.gh.bmd.jrt.proxy.builder.AbstractProxyBuilder<${interfaceFullName}> {

        private final ${classFullName} mTarget;

        private final com.gh.bmd.jrt.util.ClassToken<${interfaceFullName}> mToken = new com.gh.bmd.jrt.util.ClassToken<${interfaceFullName}>() {};

        @SuppressWarnings("ConstantConditions")
        private ProxyBuilder(@javax.annotation.Nonnull final ${classFullName} target) {

            if (target == null) {

                throw new NullPointerException("the wrapped instance must not be null");
            }

            mTarget = target;
        }

        @Override
        @javax.annotation.Nonnull
        protected com.gh.bmd.jrt.util.ClassToken<${interfaceFullName}> getInterfaceToken() {

            return mToken;
        }

        @Override
        @javax.annotation.Nonnull
        protected Object getTarget() {

            return mTarget;
        }

        @Override
        @javax.annotation.Nonnull
        protected ${interfaceFullName} newProxy(
                @javax.annotation.Nonnull final com.gh.bmd.jrt.builder.InvocationConfiguration invocationConfiguration,
                @javax.annotation.Nonnull final com.gh.bmd.jrt.builder.ProxyConfiguration proxyConfiguration) {

            return new ${generatedClassName}${genericTypes}(mTarget, invocationConfiguration, proxyConfiguration);
        }
    }
