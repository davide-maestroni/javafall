/*
 * Copyright 2016 Davide Maestroni
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// GENERATED CODE - PLEASE DO NOT EDIT

  private final com.github.dm.jrt.core.routine.Routine<?, ${resultClassName}> mRoutine${methodCount};

  private static class InvocationFactory${methodCount}${genericTypes} extends com.github.dm.jrt.core.invocation.InvocationFactory<Object, ${resultClassName}> {

    private final com.github.dm.jrt.reflect.config.WrapperConfiguration mWrapperConfiguration;

    private final com.github.dm.jrt.reflect.InvocationTarget<?> mTarget;

    private InvocationFactory${methodCount}(
        @org.jetbrains.annotations.NotNull final com.github.dm.jrt.reflect.config.WrapperConfiguration wrapperConfiguration,
        @org.jetbrains.annotations.NotNull final com.github.dm.jrt.reflect.InvocationTarget<?> target) {
      super(com.github.dm.jrt.core.util.Reflection.asArgs(wrapperConfiguration, target));
      mWrapperConfiguration = wrapperConfiguration;
      mTarget = target;
    }

    @org.jetbrains.annotations.NotNull
    @Override
    public com.github.dm.jrt.core.invocation.Invocation<Object, ${resultClassName}> newInvocation() {
      return new Invocation${methodCount}${genericTypes}(mWrapperConfiguration, mTarget);
    }
  }

  @org.jetbrains.annotations.NotNull
  private com.github.dm.jrt.core.routine.Routine<?, ${resultClassName}> initRoutine${methodCount}(
      @org.jetbrains.annotations.NotNull final com.github.dm.jrt.reflect.InvocationTarget<?> target,
      @org.jetbrains.annotations.NotNull final com.github.dm.jrt.core.config.InvocationConfiguration invocationConfiguration,
      @org.jetbrains.annotations.NotNull final com.github.dm.jrt.reflect.config.WrapperConfiguration wrapperConfiguration) {
    return com.github.dm.jrt.core.JRoutineCore.with(new InvocationFactory${methodCount}${genericTypes}(wrapperConfiguration, target))
                                              .invocationConfiguration()
                                              .withPatch(invocationConfiguration)
                                              ${routineBuilderOptions}
                                              .apply()
                                              .buildRoutine();
  }
