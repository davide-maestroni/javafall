/**
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'findbugs'

group = 'com.github.davide-maestroni'
version = '1.0.0'
archivesBaseName = project.parent.name

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.google.code.findbugs:findbugs:3.0.0'

    testCompile 'junit:junit:4.11'
    testCompile 'org.easytesting:fest-assert-core:2.0M10'
}

task proguardTask(type: proguard.gradle.ProGuardTask) {
    configuration file("${project.projectDir}/proguard-project.txt")
    injars file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar")
    libraryjars file("${System.env.JAVA_HOME}jre/lib/rt.jar")
    libraryjars configurations.compile.filter { !it.isDirectory() }
    outjars file("${project.buildDir}/libs/${archivesBaseName}-${version}-pro.jar")
}

javadoc {
    title = "${archivesBaseName} ${version}"
    options.links("http://docs.oracle.com/javase/7/docs/api/")
    options.overview("${project.projectDir}/docs/overview.html")
    options.windowTitle("Javadoc - ${archivesBaseName}")
}

task("jacocoTest", dependsOn: 'test') {
    description = "Runs the tests and generates the JaCoCo report files."
} << {
    tasks.jacocoTestReport.execute()
}

findbugs {
    toolVersion = "3.0.0"
    effort = "max"
    reportLevel = "low"
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

artifacts {
    archives task("sourcesJar", type: Jar) {
        description "Generates sources Jar"
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    archives task("javadocJar", type: Jar, dependsOn: tasks["javadoc"]) {
        description "Generates Javadoc Jar"
        classifier = 'javadoc'
        from 'build/docs/javadoc'
    }
}

signing {
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            def localRepoUrl = mavenLocal().url.toString()

            if (file(localRepoUrl).exists()) {

                // Upload the artifacts to the local repository
                repository(url: localRepoUrl)
            }

            if (project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')) {

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }
            }

            pom.project {
                name = archivesBaseName
                packaging = 'jar'
                description = 'Easily iterate through Android sparse collections'
                url = 'http://davide-maestroni.github.io/jroutine/'

                scm {
                    url = 'git@github.com:davide-maestroni/jroutine.git'
                    connection = 'scm:git:git@github.com:davide-maestroni/jroutine.git'
                    developerConnection = 'scm:git:git@github.com:davide-maestroni/jroutine.git'
                }

                licenses {
                    license {
                        name = 'The Apache Software License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution = 'repo'
                    }
                }

                developers {
                    developer {
                        id = 'davide-maestroni'
                        name = 'Davide Maestroni'
                    }
                }
            }
        }
    }
}