/**
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import com.android.builder.core.BuilderConstants

apply plugin: 'com.android.library'
apply plugin: 'jacoco'
apply plugin: 'findbugs'
apply from: '../upload.gradle'

group = 'com.github.davide-maestroni'
version = '1.0.0'
archivesBaseName = project.name

android {
    compileSdkVersion 21
    buildToolsVersion '21.0.2' // Travis does not support an higher version

    defaultConfig {
        minSdkVersion 3
        targetSdkVersion 21
        versionCode 100
        versionName version
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }

        debug {
            minifyEnabled false
            testCoverageEnabled true
        }
    }

    lintOptions {
        disable 'InvalidPackage', 'OldTargetApi'
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile project(':lib')

    androidTestCompile 'com.squareup:fest-android:1.0.7'
}

task('jacocoTest', dependsOn: 'connectedCheck') {
    description = "Runs the tests and generates the JaCoCo report files."
} << {
    tasks.createDebugCoverageReport.execute()
}

task('javadoc', dependsOn: 'javadocRelease')

android.libraryVariants.all { variant ->

    def buildTypeName = variant.buildType.name

    if (buildTypeName.equals(BuilderConstants.DEBUG)) {

        task('findbugsMain', type: FindBugs, dependsOn: "assemble${buildTypeName.capitalize()}") {
            classes = fileTree(variant.javaCompile.destinationDir).filter {
                !it.name.startsWith('R\$') && !it.name.equals('R.class')
            }
            source = variant.javaCompile.source
            classpath = files(variant.javaCompile.classpath.files)
            effort = 'max'
            reportLevel = 'low'
            reports {
                xml.enabled = false
                html.enabled = true
            }
        }

        // Skip debug builds.
        return
    }

    def variantName = variant.name.capitalize()

    task("javadoc${variantName}", type: Javadoc) {
        description "Generates Javadoc from the ${variantName} build"
        source = variant.javaCompile.source
        ext.androidJar =
                "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
        title = "${archivesBaseName} ${version}"
        options.links('http://docs.oracle.com/javase/7/docs/api/')
        options.linksOffline('http://developer.android.com/reference/', "${android.sdkDirectory}/docs/reference/")
        options.overview("${project.projectDir}/docs/overview.html")
        options.windowTitle("Javadoc - ${archivesBaseName}")
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
    }

    artifacts {

        archives task("sourcesJar${variantName}", type: Jar) {
            description "Generates sources Jar from the ${variantName} build"
            classifier = 'sources'
            from variant.sourceSets.java.srcDirs
        }

        archives task("javadocJar${variantName}", type: Jar, dependsOn: "javadoc${variantName}") {
            description "Generates Javadoc Jar from the ${variantName} build"
            classifier = 'javadoc'
            from 'build/docs/javadoc'
        }

        archives task("jar${variantName}", type: Jar, dependsOn: variant.javaCompile) {
            description "Generates Jar from the ${variantName} build"
            from variant.javaCompile.destinationDir
            exclude '**/BuildConfig.class'
            exclude '**/R*.class'
        }
    }
}